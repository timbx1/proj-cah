{"ast":null,"code":"var _jsxFileName = \"D:\\\\Webprog\\\\proj-cah\\\\src\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer(props) {\n  _s();\n\n  const {\n    seconds,\n    minutes,\n    restart,\n    expiryTimestamp\n  } = useTimer({\n    expiryTimestamp: props.expiryTimestamp\n  });\n  const timerRef = useRef();\n  useEffect(() => {\n    timerRef.current = restart; // Store the restart function in a ref\n    // When the component unmounts, clear the timer\n\n    return () => {\n      timerRef.current(null);\n    };\n  }, [props.expiryTimestamp]);\n  useEffect(() => {\n    // When the timer expires, call the onExpire callback\n    if (minutes === 0 && seconds === 0) {\n      props.onExpire();\n    }\n  }, [minutes, seconds, props.onExpire]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [minutes < 10 ? '0' : '', minutes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [seconds < 10 ? '0' : '', seconds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 55\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"qDwF6zzuLc2Scf/or7Hdhd/9E18=\", false, function () {\n  return [useTimer];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useEffect","useRef","useTimer","Timer","props","seconds","minutes","restart","expiryTimestamp","timerRef","current","onExpire","textAlign"],"sources":["D:/Webprog/proj-cah/src/Timer.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useTimer } from 'react-timer-hook';\r\n\r\nfunction Timer(props) {\r\n  const {\r\n    seconds,\r\n    minutes,\r\n    restart,\r\n    expiryTimestamp,\r\n  } = useTimer({ expiryTimestamp: props.expiryTimestamp });\r\n\r\n  const timerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    timerRef.current = restart; // Store the restart function in a ref\r\n\r\n    // When the component unmounts, clear the timer\r\n    return () => {\r\n      timerRef.current(null);\r\n    };\r\n  }, [props.expiryTimestamp]);\r\n\r\n  useEffect(() => {\r\n    // When the timer expires, call the onExpire callback\r\n    if (minutes === 0 && seconds === 0) {\r\n      props.onExpire();\r\n    }\r\n  }, [minutes, seconds, props.onExpire]);\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <span>{minutes < 10 ? '0' : ''}{minutes}</span>:<span>{seconds < 10 ? '0' : ''}{seconds}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;EAAA;;EACpB,MAAM;IACJC,OADI;IAEJC,OAFI;IAGJC,OAHI;IAIJC;EAJI,IAKFN,QAAQ,CAAC;IAAEM,eAAe,EAAEJ,KAAK,CAACI;EAAzB,CAAD,CALZ;EAOA,MAAMC,QAAQ,GAAGR,MAAM,EAAvB;EAEAD,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACC,OAAT,GAAmBH,OAAnB,CADc,CACc;IAE5B;;IACA,OAAO,MAAM;MACXE,QAAQ,CAACC,OAAT,CAAiB,IAAjB;IACD,CAFD;EAGD,CAPQ,EAON,CAACN,KAAK,CAACI,eAAP,CAPM,CAAT;EASAR,SAAS,CAAC,MAAM;IACd;IACA,IAAIM,OAAO,KAAK,CAAZ,IAAiBD,OAAO,KAAK,CAAjC,EAAoC;MAClCD,KAAK,CAACO,QAAN;IACD;EACF,CALQ,EAKN,CAACL,OAAD,EAAUD,OAAV,EAAmBD,KAAK,CAACO,QAAzB,CALM,CAAT;EAOA,oBACE;IAAK,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAb,CAAZ;IAAA,wBACE;MAAA,WAAON,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAA5B,EAAgCA,OAAhC;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,oBACkD;MAAA,WAAOD,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAA5B,EAAgCA,OAAhC;IAAA;MAAA;MAAA;MAAA;IAAA,QADlD;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA/BQF,K;UAMHD,Q;;;KANGC,K;AAiCT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}