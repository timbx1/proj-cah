{"ast":null,"code":"var _jsxFileName = \"D:\\\\Webprog\\\\proj-cah\\\\src\\\\JoinedGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport config from './config.json';\nimport { Status } from './Status';\nimport { Hilfe } from './Hilfe';\nimport './JoinedGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JoinedGame(props) {\n  _s();\n\n  // Deklaration der benötigten Zustände und Variablen\n  const playerData = props.pData;\n  const gameid = props.gId;\n  const [players, setPlayers] = useState(); // Zustand zur Speicherung der Spielerliste\n\n  const [buttonRefresh, setRefresh] = useState(\"Refresh\"); // Zustand für den Text auf dem Aktualisierungsbutton\n\n  useEffect(() => {\n    getGameData();\n  }, []); // Funktion, um zum Spielbildschirm zu wechseln\n\n  function goToGame() {\n    console.log('start_game');\n    props.changeUi(2, playerData, gameid);\n  } // Funktion, um das Spiel zu starten\n\n\n  function startGame() {\n    console.log(\"start\");\n    let Jstring = '{\"player\":' + playerData.id + ',\"action\":\"start\"}';\n    let msg = JSON.parse(Jstring);\n    axios.patch(config.preUrl + 'games/' + gameid + '/' + playerData.id, msg).then(response => {\n      goToGame();\n    });\n  } // Funktion, um zu überprüfen, ob das Spiel läuft\n\n\n  function checkIfRunning(game, index) {\n    axios.get(config.preUrl + 'games/').then(response => {\n      if (!response.data.games[index].running) {\n        setTimeout(checkIfRunning(game, index), 5000);\n      } else {\n        goToGame();\n      }\n    });\n  } // Funktion zum Anzeigen der Spielerliste und Starten des Spiels\n\n\n  function showPlayers(gameData) {\n    var index = 0;\n\n    for (let i = 0; i < gameData.length; i++) {\n      if (gameData[i].id == gameid) {\n        index = i;\n      }\n    }\n\n    var players = gameData[index].players;\n    var pList = [];\n    pList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" \"\n    }, \"p1\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this));\n    pList.push(players.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"|  \", user.name, \" \"]\n    }, user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 39\n    }, this))); // Überprüfen, ob der Spieler der Besitzer des Spiels ist\n\n    if (gameData[index].owner.id == playerData.id) {\n      pList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" \"\n      }, \"p2\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }, this));\n      pList.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: \"START GAME\"\n      }, \"onlyowner\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 18\n      }, this));\n      setPlayers(pList);\n    } else {\n      pList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: \"Warte auf den Besitzer, um das Spiel zu starten\"\n      }, \"p3\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 18\n      }, this));\n      setPlayers(pList);\n      checkIfRunning(gameData[index], index);\n    }\n  } // Funktion zum Abrufen der Spieldaten\n\n\n  function getGameData() {\n    setRefresh(\"Refresh\");\n    axios.get(config.preUrl + 'games/').then(response => {\n      console.log(response.data.games);\n      showPlayers(response.data.games);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getGameData,\n      id: \"reload\",\n      className: \"button\",\n      children: buttonRefresh\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status\",\n          children: /*#__PURE__*/_jsxDEV(Status, {\n            gId: gameid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"help\",\n          children: /*#__PURE__*/_jsxDEV(Hilfe, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Spieler: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), players]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JoinedGame, \"WSn9vZHU2M63bYCiBR4LBluKwFA=\");\n\n_c = JoinedGame;\nexport default JoinedGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinedGame\");","map":{"version":3,"names":["React","Component","useState","useEffect","axios","config","Status","Hilfe","JoinedGame","props","playerData","pData","gameid","gId","players","setPlayers","buttonRefresh","setRefresh","getGameData","goToGame","console","log","changeUi","startGame","Jstring","id","msg","JSON","parse","patch","preUrl","then","response","checkIfRunning","game","index","get","data","games","running","setTimeout","showPlayers","gameData","i","length","pList","push","map","user","name","owner","color"],"sources":["D:/Webprog/proj-cah/src/JoinedGame.js"],"sourcesContent":["import React, { Component, useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport config from './config.json'\r\nimport { Status } from './Status'\r\nimport { Hilfe } from './Hilfe'\r\nimport './JoinedGame.css';\r\n\r\nfunction JoinedGame(props) {\r\n  // Deklaration der benötigten Zustände und Variablen\r\n  const playerData = props.pData\r\n  const gameid = props.gId\r\n  const [players , setPlayers] = useState() // Zustand zur Speicherung der Spielerliste\r\n  const [buttonRefresh , setRefresh] = useState(\"Refresh\") // Zustand für den Text auf dem Aktualisierungsbutton\r\n\r\n  useEffect(()=>{\r\n    getGameData()\r\n  },[])\r\n\r\n  // Funktion, um zum Spielbildschirm zu wechseln\r\n  function goToGame(){\r\n    console.log('start_game')\r\n    props.changeUi(2,playerData,gameid)\r\n  }\r\n\r\n  // Funktion, um das Spiel zu starten\r\n  function startGame (){\r\n    console.log(\"start\")\r\n    let Jstring = '{\"player\":'+playerData.id+',\"action\":\"start\"}' \r\n    let msg = JSON.parse(Jstring)\r\n    axios.patch(config.preUrl+'games/'+gameid+'/'+playerData.id,msg).then(response => {\r\n      goToGame()\r\n    })\r\n  }\r\n\r\n  // Funktion, um zu überprüfen, ob das Spiel läuft\r\n  function checkIfRunning (game, index){\r\n    axios.get(config.preUrl+'games/').then(response => {\r\n      \r\n      if(!response.data.games[index].running){\r\n        setTimeout(checkIfRunning(game ,index), 5000) \r\n      }\r\n      else{\r\n        goToGame()\r\n      }\r\n      \r\n    }) \r\n  }\r\n\r\n  // Funktion zum Anzeigen der Spielerliste und Starten des Spiels\r\n  function showPlayers(gameData){\r\n    var index = 0;\r\n    for(let i = 0; i < gameData.length; i++){\r\n      if (gameData[i].id == gameid){\r\n        index = i\r\n      }\r\n    }\r\n    var players = gameData[index].players\r\n    var pList = []\r\n    pList.push(<p key={\"p1\"}> </p>)\r\n    pList.push(players.map((user) => (<div key={user.id}>|  {user.name} </div>)))\r\n\r\n    // Überprüfen, ob der Spieler der Besitzer des Spiels ist\r\n    if (gameData[index].owner.id == playerData.id){\r\n      pList.push(<p key={\"p2\"}> </p>)\r\n      pList.push(<button key={\"onlyowner\"} onClick={startGame}>START GAME</button>)\r\n      setPlayers(pList)\r\n    }\r\n    else{\r\n      pList.push(<p key={\"p3\"} style={{color:'red'}}>Warte auf den Besitzer, um das Spiel zu starten</p>)\r\n      setPlayers(pList)\r\n      checkIfRunning(gameData[index],index)\r\n    }\r\n  }\r\n\r\n  // Funktion zum Abrufen der Spieldaten\r\n  function getGameData (){\r\n    setRefresh(\"Refresh\")\r\n    axios.get(config.preUrl+'games/').then(response => {\r\n      console.log(response.data.games)\r\n      showPlayers(response.data.games)\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <button onClick={getGameData} id=\"reload\" className=\"button\">{buttonRefresh}</button>\r\n      <div className=\"content\">\r\n        <div className=\"top-section\">\r\n          <div className=\"status\">\r\n            <Status gId={gameid} />\r\n          </div>\r\n          <div className=\"help\">\r\n            <Hilfe  />\r\n          </div>\r\n        </div>\r\n        <div className=\"player-list\">\r\n          <label className=\"label\">Spieler: </label>\r\n          {players}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JoinedGame\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}