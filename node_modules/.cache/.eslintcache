[{"D:\\Webprog\\proj-cah\\src\\index.js":"1","D:\\Webprog\\proj-cah\\src\\App.js":"2","D:\\Webprog\\proj-cah\\src\\preGame.js":"3","D:\\Webprog\\proj-cah\\src\\PreGame.js":"4","D:\\Webprog\\proj-cah\\src\\joinedGame.js":"5","D:\\Webprog\\proj-cah\\src\\JoinedGame.js":"6","D:\\Webprog\\proj-cah\\src\\Recycle_bin.js":"7","D:\\Webprog\\proj-cah\\src\\InGame.js":"8","D:\\Webprog\\proj-cah\\src\\Players.js":"9","D:\\Webprog\\proj-cah\\src\\Card.js":"10","D:\\Webprog\\proj-cah\\src\\Timer.js":"11","D:\\Webprog\\proj-cah\\src\\Status.js":"12","D:\\Webprog\\proj-cah\\src\\Hilfe.js":"13","D:\\Webprog\\proj-cah\\src\\PacksView.js":"14","D:\\Webprog\\proj-cah\\src\\Pack.js":"15","D:\\Webprog\\proj-cah\\src\\Game.js":"16","D:\\Webprog\\proj-cah\\src\\CreateGame.js":"17","D:\\Webprog\\proj-cah\\src\\PlayAnimation.js":"18"},{"size":235,"mtime":1657810865847,"results":"19","hashOfConfig":"20"},{"size":2188,"mtime":1695891816359,"results":"21","hashOfConfig":"20"},{"size":3262,"mtime":1656811581048,"results":"22","hashOfConfig":"20"},{"size":6445,"mtime":1695910067429,"results":"23","hashOfConfig":"20"},{"size":804,"mtime":1656811577821,"results":"24","hashOfConfig":"20"},{"size":3185,"mtime":1695909574823,"results":"25","hashOfConfig":"20"},{"size":1833,"mtime":1695910273776,"results":"26","hashOfConfig":"20"},{"size":10197,"mtime":1695909370372,"results":"27","hashOfConfig":"20"},{"size":1518,"mtime":1695909895211,"results":"28","hashOfConfig":"20"},{"size":1458,"mtime":1695812729440,"results":"29","hashOfConfig":"20"},{"size":939,"mtime":1694630366783,"results":"30","hashOfConfig":"20"},{"size":935,"mtime":1695910101963,"results":"31","hashOfConfig":"20"},{"size":1147,"mtime":1695909234057,"results":"32","hashOfConfig":"20"},{"size":1924,"mtime":1695909681773,"results":"33","hashOfConfig":"20"},{"size":3575,"mtime":1695909621772,"results":"34","hashOfConfig":"20"},{"size":4973,"mtime":1695909181745,"results":"35","hashOfConfig":"20"},{"size":4336,"mtime":1695733042296,"results":"36","hashOfConfig":"20"},{"size":1714,"mtime":1695909817357,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"oe4kw8",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},"D:\\Webprog\\proj-cah\\src\\index.js",[],[],[],"D:\\Webprog\\proj-cah\\src\\App.js",[],[],"D:\\Webprog\\proj-cah\\src\\preGame.js",[],[],"D:\\Webprog\\proj-cah\\src\\PreGame.js",["103","104","105","106","107","108"],[],"import React, { useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport config from './config.json';\r\nimport Recycle_bin from './Recycle_bin';\r\nimport { Hilfe } from './Hilfe';\r\nimport Game from './Game';\r\nimport './PreGame.css';\r\n\r\nfunction PreGame({ changeUi, pData, gId }) {\r\n    const nameInRef = useRef();\r\n    const [outPreGame, setOutPreGame] = useState('');\r\n    const [gamesLabel, setGamesLabel] = useState('');\r\n    const [nameLabel, setNameLabel] = useState('Name eingeben:');\r\n    const [games, setGames] = useState();\r\n    const [searchBox, setSearchBox] = useState(\r\n        <div>\r\n            <input ref={nameInRef} type=\"text\"></input>\r\n            <button onClick={handleSearch}>SPIEL SUCHEN</button>\r\n        </div>\r\n    );\r\n\r\n    function goToGame(num, playerdata, gameid) {\r\n        console.log('Zum Spiel gehen');\r\n        changeUi(num, playerdata, gameid);\r\n    }\r\n\r\n    // Einem Spiel beitreten mit gegebener ID\r\n    function joinGame(gameid, playerdata) {\r\n        setOutPreGame(outPreGame + '.');\r\n        var Jstring = '{\"action\":\"join\"}';\r\n        var msg = JSON.parse(Jstring);\r\n\r\n        axios.patch(config.preUrl + 'games/' + gameid + '/' + playerdata.id, msg).then(response => {\r\n            goToGame(1, playerdata, gameid);\r\n        });\r\n    }\r\n\r\n    // Ein Spiel erstellen\r\n    function createGame(playerdata) {\r\n        setOutPreGame(outPreGame + '.');\r\n        var userid = playerdata.id;\r\n        var Jstring = '{\"owner\":' + userid + '}';\r\n        var msg = JSON.parse(Jstring);\r\n\r\n        axios.post(config.preUrl + 'games/', msg).then(response => {\r\n            goToGame(1, playerdata, response.data.id);\r\n        });\r\n    }\r\n\r\n    /* Wenn ein Spiel weniger als 4 Spieler hat und nicht l√§uft, \r\n    einem Spiel beitreten, ansonsten ein Spiel erstellen mit sich selbst als Besitzer */\r\n    function scanGames(games, data) {\r\n        setOutPreGame(outPreGame + '.');\r\n\r\n        var send = false;\r\n        if (!(games.length === 0)) {\r\n            for (let i = 0; i < games.length; i++) {\r\n                if ((games[i].players.length) < 3 && !(games[i].running)) {\r\n                    joinGame(games[i].id, data);\r\n                    return;\r\n                } else {\r\n                    send = true;\r\n                }\r\n            }\r\n            if (send) {\r\n                createGame(data);\r\n            }\r\n        } else {\r\n            createGame(data);\r\n        }\r\n    }\r\n\r\n    // Spiele mappen und anzeigen\r\n    function mapGames(gameArr, data) {\r\n        setGamesLabel('Spiele:');\r\n        let pList = [];\r\n        pList.push(gameArr.map((eintrag) => (\r\n            <div>\r\n                <p> </p>\r\n                <Game joinGame={joinGame} gId={eintrag.id} owner={eintrag.owner} goal={eintrag.goal} packs={eintrag.packs} player={eintrag.players} playerData={data}></Game>\r\n            </div>\r\n        )));\r\n        setGames(pList);\r\n    }\r\n\r\n    // Spiele abrufen\r\n    function searchGame(data) {\r\n        setOutPreGame(outPreGame + '.');\r\n        axios.get(config.preUrl + 'games/').then(response => {\r\n            mapGames(response.data.games, data);\r\n        });\r\n    }\r\n\r\n    // Spieler posten\r\n    function postPlayers(inName, createGame) {\r\n        var Jstring = '{\"name\":' + '\"' + inName + '\"' + '}';\r\n        var msg = JSON.parse(Jstring);\r\n        axios.post(config.preUrl + 'players/', msg).then(response => {\r\n            if (createGame) {\r\n                goToCreateGame(response.data);\r\n            } else {\r\n                searchGame(response.data);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Die Suchfeld-Ansicht aktualisieren\r\n    function update_search_box(inName) {\r\n        setSearchBox(\r\n            <label>{inName}</label>\r\n        );\r\n    }\r\n\r\n    // Zum Erstellen eines Spiels gehen\r\n    function goToCreateGame(data) {\r\n        changeUi(4, data, gId);\r\n    }\r\n\r\n    // Name setzen und Spieler abrufen\r\n    function setName(inName, data, createGame) {\r\n        setOutPreGame(outPreGame + '.');\r\n\r\n        var send = false;\r\n        if (inName == '') {\r\n            setOutPreGame(\"KEIN NAME EINGEGEBEN\");\r\n        } else {\r\n            if (!(data.length === 0)) {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    if (data[i].name == inName) {\r\n                        setOutPreGame(\"NAME BEREITS VERGEBEN\");\r\n                    } else {\r\n                        send = true;\r\n                    }\r\n                }\r\n                if (send) {\r\n                    postPlayers(inName, createGame);\r\n                    update_search_box(inName);\r\n                    setNameLabel('Dein Name: ');\r\n                }\r\n            } else {\r\n                postPlayers(inName, createGame);\r\n                update_search_box(inName);\r\n                setNameLabel('Dein Name: ');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Name erhalten und Spieler abrufen\r\n    function getName(createGame) {\r\n        setOutPreGame('');\r\n        setOutPreGame(\"L√ÑDT\");\r\n        const inName = nameInRef.current.value;\r\n\r\n        axios.get(config.preUrl + 'players/').then(response => {\r\n            setName(inName, response.data.players, createGame);\r\n        });\r\n    }\r\n\r\n    // Verarbeitung des Suchvorgangs\r\n    function handleSearch(e) {\r\n        getName(false);\r\n        return;\r\n    }\r\n\r\n    // Ansicht der Kartens√§tze anzeigen\r\n    function handleViewPacks() {\r\n        goToGame(3, gId, pData);\r\n    }\r\n\r\n    // Ein Spiel erstellen\r\n    function handleCreateGame() {\r\n        getName(true);\r\n    }\r\n\r\n    return (\r\n        <div className='prebody'>\r\n            <div className='searchBox'>\r\n                <div className=\"wobble-animation\">\r\n                    <label style={{ fontWeight: 'bold' }}>{nameLabel}</label>\r\n                </div>\r\n\r\n                <div style={{ margin: '1%' }}>{searchBox}</div>\r\n                <div style={{ margin: '1%' }}>\r\n                    <button onClick={handleCreateGame}>Spiel Erstellen</button>\r\n                    <button onClick={handleViewPacks}>Kartens√§tze Ansehen</button>\r\n                </div>\r\n\r\n                <Hilfe />\r\n                <Recycle_bin />\r\n            </div>\r\n            <div>\r\n                <output style={{ color: 'red' }}>{outPreGame}</output>\r\n            </div>\r\n            <div><h2>{gamesLabel}</h2></div>\r\n            <div className=\"game-container\">\r\n                {games}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreGame;\r\n","D:\\Webprog\\proj-cah\\src\\joinedGame.js",[],[],"D:\\Webprog\\proj-cah\\src\\JoinedGame.js",["109","110","111","112"],[],"import React, { Component, useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport config from './config.json'\r\nimport { Status } from './Status'\r\nimport { Hilfe } from './Hilfe'\r\nimport './JoinedGame.css';\r\n\r\nfunction JoinedGame(props) {\r\n  // Deklaration der ben√∂tigten Zust√§nde und Variablen\r\n  const playerData = props.pData\r\n  const gameid = props.gId\r\n  const [players , setPlayers] = useState() // Zustand zur Speicherung der Spielerliste\r\n  const [buttonRefresh , setRefresh] = useState(\"Refresh\") // Zustand f√ºr den Text auf dem Aktualisierungsbutton\r\n\r\n  useEffect(()=>{\r\n    getGameData()\r\n  },[])\r\n\r\n  // Funktion, um zum Spielbildschirm zu wechseln\r\n  function goToGame(){\r\n    console.log('start_game')\r\n    props.changeUi(2,playerData,gameid)\r\n  }\r\n\r\n  // Funktion, um das Spiel zu starten\r\n  function startGame (){\r\n    console.log(\"start\")\r\n    let Jstring = '{\"player\":'+playerData.id+',\"action\":\"start\"}' \r\n    let msg = JSON.parse(Jstring)\r\n    axios.patch(config.preUrl+'games/'+gameid+'/'+playerData.id,msg).then(response => {\r\n      goToGame()\r\n    })\r\n  }\r\n\r\n  // Funktion, um zu √ºberpr√ºfen, ob das Spiel l√§uft\r\n  function checkIfRunning (game, index){\r\n    axios.get(config.preUrl+'games/').then(response => {\r\n      \r\n      if(!response.data.games[index].running){\r\n        setTimeout(checkIfRunning(game ,index), 5000) \r\n      }\r\n      else{\r\n        goToGame()\r\n      }\r\n      \r\n    }) \r\n  }\r\n\r\n  // Funktion zum Anzeigen der Spielerliste und Starten des Spiels\r\n  function showPlayers(gameData){\r\n    var index = 0;\r\n    for(let i = 0; i < gameData.length; i++){\r\n      if (gameData[i].id == gameid){\r\n        index = i\r\n      }\r\n    }\r\n    var players = gameData[index].players\r\n    var pList = []\r\n    pList.push(<p key={\"p1\"}> </p>)\r\n    pList.push(players.map((user) => (<div key={user.id}>|  {user.name} </div>)))\r\n\r\n    // √úberpr√ºfen, ob der Spieler der Besitzer des Spiels ist\r\n    if (gameData[index].owner.id == playerData.id){\r\n      pList.push(<p key={\"p2\"}> </p>)\r\n      pList.push(<button key={\"onlyowner\"} onClick={startGame}>START GAME</button>)\r\n      setPlayers(pList)\r\n    }\r\n    else{\r\n      pList.push(<p key={\"p3\"} style={{color:'red'}}>Warte auf den Besitzer, um das Spiel zu starten</p>)\r\n      setPlayers(pList)\r\n      checkIfRunning(gameData[index],index)\r\n    }\r\n  }\r\n\r\n  // Funktion zum Abrufen der Spieldaten\r\n  function getGameData (){\r\n    setRefresh(\"Refresh\")\r\n    axios.get(config.preUrl+'games/').then(response => {\r\n      console.log(response.data.games)\r\n      showPlayers(response.data.games)\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <button onClick={getGameData} id=\"reload\" className=\"button\">{buttonRefresh}</button>\r\n      <div className=\"content\">\r\n        <div className=\"top-section\">\r\n          <div className=\"status\">\r\n            <Status gId={gameid} />\r\n          </div>\r\n          <div className=\"help\">\r\n            <Hilfe  />\r\n          </div>\r\n        </div>\r\n        <div className=\"player-list\">\r\n          <label className=\"label\">Spieler: </label>\r\n          {players}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JoinedGame\r\n","D:\\Webprog\\proj-cah\\src\\Recycle_bin.js",[],[],"D:\\Webprog\\proj-cah\\src\\InGame.js",["113","114","115","116","117","118","119","120"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Players from './Players';\r\nimport './InGame.css';\r\nimport axios from \"axios\";\r\nimport config from './config.json';\r\nimport Card from \"./Card\";\r\nimport { useTimer } from 'react-timer-hook';\r\nimport Timer from \"./Timer\";\r\nimport { Status } from \"./Status\";\r\nimport { Hilfe } from \"./Hilfe\";\r\n\r\nconst InGame = (props) => {\r\n    // Initialisierung von Variablen und Zust√§nden\r\n    let pointId = 0;\r\n    const playerData = props.pData;\r\n    const gameid = props.gId;\r\n    const [points, setPoints] = useState([]);\r\n    const [cards, setCards] = useState();\r\n    const [cardToOfferID, setCardToOfferID] = useState();\r\n    const [cardToOfferText, setCardToOfferText] = useState();\r\n    const [blackCard, setBlackCard] = useState();\r\n    const [czar, setCzar] = useState('loading');\r\n    let pointArray = [];\r\n    let cardIdsArray = []\r\n    let picksInBC\r\n    let running = true\r\n    let czarId;\r\n\r\n    //'main method'\r\n    useEffect(() => {\r\n        refresh();\r\n    }, []);\r\n\r\n    // Funktion zum Aktualisieren der Spieloberfl√§che\r\n    function refresh() {\r\n        is_game_running()\r\n        if(running){\r\n            pullPoints()\r\n            cardIdsArray= []\r\n            voteCardIds = []\r\n            setCards(null);\r\n            setCardToOfferID(null);\r\n            setCardToOfferText(null);\r\n            setBlackCard(null);\r\n            getBlackCard();\r\n            getCzar();\r\n        }\r\n    }\r\n\r\n    // √úberpr√ºfung, ob das Spiel l√§uft oder beendet ist\r\n    function is_game_running(){\r\n        axios.get(config.preUrl + 'games/').then(response => {\r\n            check_game_end(response.data.games)\r\n        });\r\n    }\r\n    function check_game_end(games){\r\n        for(let i=0;i<games.length;i++){\r\n            if (games[i].id == gameid){\r\n                running = games[i].running\r\n                if(running){\r\n                    return\r\n                }\r\n                else{\r\n                    console.log('animation')\r\n                    play_animation()\r\n                }   \r\n            }\r\n        }\r\n    }\r\n\r\n    // Funktion zur Ausf√ºhrung einer Animation, wenn das Spiel beendet ist\r\n    function play_animation(){\r\n        props.changeUi(5, playerData, gameid)\r\n    }\r\n\r\n    // Laden und Anzeigen der Kartenangebote\r\n    function offerCard(cId, text) {\r\n\r\n        cardIdsArray.push(cId,)\r\n        console.log(cId)\r\n        setCardToOfferID(cId);\r\n        setCardToOfferText(text);\r\n        console.log(picksInBC)\r\n\r\n        let picks = []\r\n        for (let i = 0; i < cardIdsArray.length;i++){\r\n            if (i > cardIdsArray.length-1-picksInBC){\r\n                picks.push(cardIdsArray[i])\r\n            }\r\n        }\r\n        if(picks.length = picksInBC){\r\n            console.log('offeredCard')\r\n            putCard(picks);\r\n        }\r\n    }\r\n\r\n    // Wenn der Czar ist, werden keine wei√üen Karten angezeigt\r\n    function getCzar() {\r\n        axios.get(config.preUrl + 'games/' + gameid).then(response => {\r\n            setCzar(response.data.czar);\r\n            czarId=response.data.czar.id\r\n            if (response.data.czar.id !== playerData.id) {\r\n                getWhiteCards();\r\n            }\r\n            else{\r\n                getWaitingPlayers();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Abrufen der Spielerpunkte\r\n    function pullPoints() {\r\n        axios.get(config.preUrl + 'games/' + gameid).then(response => {\r\n            createPoints(response.data.points);\r\n        });\r\n    }\r\n\r\n    // Darstellung der Spielerpunkte\r\n    function createPoints(pointArr) {\r\n        pointArray = pointArr;\r\n        var pList = [];\r\n        pList.push(<p key={\"p1\"}> </p>);\r\n        pList.push(pointArr.map((point) => (<div key={pointId += 1}> : {point} |</div>)));\r\n        setPoints(pList);\r\n    }\r\n\r\n    // Rendern der wei√üen Karten des Spielers\r\n    // boo=true => Verwendung von btn rendernn false => vote btn rendern\r\n    function createWhiteCards(cardsArr, boo) {\r\n        let cList = [];\r\n        cList.push(cardsArr.map((eintrag) => (\r\n            <div>\r\n                <p> </p>\r\n                <Card key={eintrag.id} showBtn={true} btnboo={boo} voteCard={voteCard} offerCard={offerCard} pId={playerData.id} gId={gameid} cId={eintrag.id} text={eintrag.text} />\r\n            </div>\r\n        )));\r\n        setCards(cList);\r\n    }\r\n\r\n    // Abrufen der wei√üen Karten des Spielers zur Auswahl\r\n    function getWhiteCards() {\r\n        axios.get(config.preUrl + 'games/' + gameid + '/cards/' + playerData.id).then(response => {\r\n            console.log(response.data.cards)\r\n            createWhiteCards(response.data.cards, true);\r\n        });\r\n    }\r\n\r\n    // Abrufen der schwarzen Karte\r\n    function getBlackCard() {\r\n        axios.get(config.preUrl + 'games/' + gameid).then(response => {\r\n            setBlackCard(response.data.currentBlackCard.text);\r\n            picksInBC = response.data.currentBlackCard.pick\r\n        });\r\n    }\r\n\r\n    let voteCardIds=[]\r\n    // Callback von der Vote-Schaltfl√§che in Karten\r\n    function voteCard(cId) {\r\n        voteCardIds.push(cId)\r\n        let picks = []\r\n        for (let i = 0; i < voteCardIds.length;i++){\r\n            if (i > voteCardIds.length-1-picksInBC){\r\n                picks.push(voteCardIds[i])\r\n                console.log(voteCardIds[i])\r\n            }\r\n        }\r\n        if(picks.length = picksInBC){\r\n            console.log('voted')\r\n            putVoteCard(picks);\r\n        }\r\n    }\r\n\r\n    // Hochladen der Abstimmungskarte\r\n    function putVoteCard(cIdArr){\r\n        console.log('Vote');\r\n        let id_string = JSON.stringify(cIdArr);\r\n        let Jstring = `{\"cards\": ${id_string}}`;\r\n        const msg = JSON.parse(Jstring);\r\n        // Ein axios-Aufruf, um die Abstimmung durchzuf√ºhren\r\n        axios.put(config.preUrl + 'games/' + gameid + '/offers/' + playerData.id, msg)\r\n          .then(response => {\r\n            refresh();\r\n            console.log(response.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Fehler beim Abstimmen:', error);\r\n          });\r\n    }\r\n\r\n    // Warten auf die Abstimmung des Czars\r\n    function waitForCzarToVote() {\r\n        is_game_running()\r\n        if(running){\r\n            axios.get(config.preUrl + 'games/' + gameid).then(response => {\r\n                if (JSON.stringify(response.data.points) === JSON.stringify(pointArray)) {\r\n                    waitForCzarToVote();\r\n                    console.log(response.data.points)\r\n                    console.log(pointArray)\r\n                    console.log('waiting_for_Czar')\r\n                } else {\r\n                    refresh();\r\n                    console.log('refreshing')\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Angebot einer Karte an den Czar\r\n    // ----> put wechselt abgegebene Karten\r\n    function putCard(id) {\r\n        console.log(id)\r\n        //console.log('player: ' + playerData.id + ' game: ' + gameid);\r\n        let id_string = JSON.stringify(id);\r\n        let Jstring = `{\"cards\": ${id_string}}`;\r\n        let msg = JSON.parse(Jstring);\r\n        axios.put(config.preUrl + 'games/' + gameid + '/cards/' + playerData.id, msg).then(response => {\r\n            waitForCzarToVote();\r\n        });\r\n    }\r\n\r\n    // Timer timeout callback, wenn der Czar ist, dann get offers\r\n    async function onExpire() {\r\n        await timeout(2000)\r\n        console.log('expire');\r\n        //console.log('player: ' + playerData.id + ' game: ' + gameid);\r\n        if (czarId == playerData.id) {\r\n            console.log('Player ist der Czar')\r\n            axios.get(config.preUrl + 'games/' + gameid + '/offers/' + playerData.id).then(response => {\r\n                console.log('Erstellen von Czar-Karten')\r\n                createZarCards(response.data.offers, false);\r\n                \r\n            });\r\n        }\r\n        else{\r\n            console.log('Spieler ist nicht der Czar')\r\n        }\r\n    }\r\n\r\n    // √úberpr√ºfen, ob Spieler warten\r\n    function checkForPlayers(data){\r\n        console.log(data.waitingForPlayers)\r\n        if (data.waitingForPlayers === 0){\r\n            onExpire()\r\n        }\r\n        else{ \r\n            console.log('√úberpr√ºfung auf Spieler')\r\n            getWaitingPlayers()\r\n        }\r\n\r\n    }\r\n\r\n    // Wenn alle Spieler Karten abgegeben haben, dann onExpire\r\n    function getWaitingPlayers (){\r\n        axios.get(config.preUrl + 'games/' + gameid).then(response => {\r\n            checkForPlayers(response.data)\r\n        });\r\n    }\r\n\r\n    // Funktion zum Timeout\r\n    function timeout(delay) {\r\n        return new Promise( res => setTimeout(res, delay) );\r\n    }\r\n\r\n    // Erstellen von Karten f√ºr den Czar\r\n    function createZarCards(cardsArr,boo){\r\n        let cList = []\r\n        for (let i = 0 ; i <cardsArr.length; i++ ){\r\n            \r\n            cList.push(cardsArr[i].map((eintrag) => (\r\n            <div>\r\n                <p> </p>\r\n                <Card key={eintrag.id} btnboo={boo} showBtn = {true} voteCard={voteCard} offerCard={offerCard} pId={playerData.id} gId={gameid} cId={eintrag.id} text={eintrag.text} />\r\n            </div>\r\n            )))\r\n            \r\n        }\r\n        setCards(cList)  \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div align=\"center\" id=\"title\"> <p>CARDS AGAINST HUMANITY: </p><Status gId={gameid}/> <Hilfe/> </div>\r\n            <div id='wrapperPlayerPoints'>\r\n                <div id='players'><Players pData={playerData} gId={gameid} /></div>\r\n                <div id='points'>\r\n                    Points:\r\n                    <div>{points}</div>\r\n                </div>\r\n                <div id=\"blackCard\">\r\n                    <div>\r\n                        <p id=\"blText\">{blackCard}</p>\r\n                    </div>\r\n                </div>\r\n                <div id=\"czar\">\r\n                    <label id=\"czarLabel\">Czar: </label>\r\n                    <label id=\"czarNameLabel\"> {czar.name}</label>\r\n                </div>\r\n                <div id=\"answer\">\r\n                    {cardToOfferText}\r\n                </div>\r\n                \r\n            </div>\r\n            <div id=\"cards\">\r\n                {cards}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InGame;\r\n","D:\\Webprog\\proj-cah\\src\\Players.js",["121","122","123"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport config from './config.json'\r\n\r\nconst Players = (props) => {\r\n    // Deklaration der ben√∂tigten Zust√§nde und Variablen\r\n    const playerData = props.pData // Spielerdaten\r\n    const gameid = props.gId // Spiel-ID\r\n    const [players , setPlayers] = useState() // Zustand zur Speicherung der Spielerliste\r\n\r\n    // Effekt-Hook, der beim Komponentenladen aufgerufen wird\r\n    useEffect(() => {\r\n        getGameData() // Funktion zum Abrufen der Spieldaten aufrufen\r\n    }, [])\r\n\r\n    // Funktion zum Anzeigen der Spielerliste\r\n    function showPlayers(gameData){\r\n        var index = 0;\r\n        for(let i = 0; i < gameData.length; i++){\r\n            if (gameData[i].id == gameid){\r\n                index = i\r\n            }\r\n        }\r\n        var players = gameData[index].players\r\n        var pList = []\r\n        pList.push(<p key={\"p1\"}> </p>)\r\n        pList.push(players.map((user) => (<div key={user.id}>|  {user.name} </div>)))\r\n        setPlayers(pList)\r\n    }\r\n\r\n    // Funktion zum Abrufen der Spieldaten von der API\r\n    function getGameData (){\r\n        axios.get(config.preUrl+'games/').then(response => {\r\n            console.log(response.data.games)\r\n            showPlayers(response.data.games)\r\n        }) \r\n    }\r\n     \r\n    // Anzeige der Spielerliste in einer HTML-Struktur\r\n    return(\r\n        <div>\r\n            Spieler: \r\n            <div>{players}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Players\r\n","D:\\Webprog\\proj-cah\\src\\Card.js",["124","125","126"],[],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Card.css';\r\nimport config from './config.json';\r\n\r\nconst Card = (props) => {\r\n  const [text, setText] = useState(\"Kein Text geladen\");\r\n  const [useBtn, setUseBtn] = useState(null);\r\n  const [type, setType] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Diese Funktion wird immer dann aufgerufen, wenn eine der Abh√§ngigkeiten (props) ge√§ndert wird.\r\n    // Sie wird verwendet, um den Text und den Button zu rendern.\r\n    setText(props.text);\r\n\r\n    // Funktion zum Rendern des Buttons basierend auf den Bedingungen\r\n    const renderButton = () => {\r\n      if (props.showBtn) {\r\n        if (props.btnboo) {\r\n          return <button id='btn' onClick={useCard}>Use</button>;\r\n        } else {\r\n          return <button id='btn' onClick={voteCard}>Vote</button>;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n\r\n    setUseBtn(renderButton());\r\n    setType(props.type);\r\n  }, [props.text, props.showBtn, props.btnboo, props.type]);\r\n\r\n  // Funktion zum Verwenden der Karte\r\n  function useCard() {\r\n    props.offerCard(props.cId, props.text);\r\n  }\r\n\r\n  // Funktion zum Abstimmen f√ºr die Karte\r\n  function voteCard() {\r\n    props.voteCard(props.cId);\r\n\r\n  }\r\n\r\n  return (\r\n    <div id='card'>\r\n      <p>{type}</p>\r\n      <p id='txt'>{text}</p>\r\n      <div id=\"vertical-center\">\r\n        <div>{useBtn}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","D:\\Webprog\\proj-cah\\src\\Timer.js",["127","128","129"],[],"import React, { useEffect, useRef } from 'react';\r\nimport { useTimer } from 'react-timer-hook';\r\n\r\nfunction Timer(props) {\r\n  const {\r\n    seconds,\r\n    minutes,\r\n    restart,\r\n    expiryTimestamp,\r\n  } = useTimer({ expiryTimestamp: props.expiryTimestamp });\r\n\r\n  const timerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    timerRef.current = restart; // Store the restart function in a ref\r\n\r\n    // When the component unmounts, clear the timer\r\n    return () => {\r\n      timerRef.current(null);\r\n    };\r\n  }, [props.expiryTimestamp]);\r\n\r\n  useEffect(() => {\r\n    // When the timer expires, call the onExpire callback\r\n    if (minutes === 0 && seconds === 0) {\r\n      props.onExpire();\r\n    }\r\n  }, [minutes, seconds, props.onExpire]);\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <span>{minutes < 10 ? '0' : ''}{minutes}</span>:<span>{seconds < 10 ? '0' : ''}{seconds}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","D:\\Webprog\\proj-cah\\src\\Status.js",["130"],[],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport config from './config.json'\r\nexport const Status = (props) => {\r\n    const [status, setStatus] = useState('loading state ...')\r\n    \r\n    useEffect(()=>{\r\n        getStaus()\r\n    },[])\r\n    // holt Spiel Array\r\n    function getStaus(){\r\n        axios.get(config.preUrl+'games/').then(response =>{\r\n            searchForState(response.data.games)\r\n        })\r\n    }\r\n    // sucht jetziges Spiel und dessen Status\r\n    function searchForState(games){\r\n        for(let i = 0; i < games.length; i++){\r\n            if(games[i].id === props.gId){\r\n                if(games[i].running){\r\n                    setStatus('RUNNING')\r\n                }\r\n                else{\r\n                    setStatus('WAITING')\r\n                }\r\n            }\r\n        }\r\n        getStaus()\r\n    }\r\n  return (\r\n    <div>\r\n        Status: {status} \r\n    </div>\r\n  )\r\n}\r\n","D:\\Webprog\\proj-cah\\src\\Hilfe.js",[],[],"D:\\Webprog\\proj-cah\\src\\PacksView.js",["131"],[],"import React,{ useEffect, useState } from 'react'\r\nimport Pack from './Pack'\r\nimport axios from 'axios'\r\nimport config from './config.json'\r\n\r\nfunction PacksView(props) {\r\n    \r\n    // Deklaration der ben√∂tigten Zust√§nde und Variablen\r\n    const [packs, setPacks] = useState() // Zustand zur Speicherung der Pack-Komponenten\r\n    const [back, setBack] = useState() // Zustand zur Anzeige der Zur√ºck-Schaltfl√§che\r\n\r\n    // Funktion zur Initialisierung des Komponentenstatus\r\n    function _init (){\r\n      getPacks()\r\n      console.log('packed')\r\n      if(props.changeUi != null){\r\n          setBack(\r\n            <button onClick={handleBack}>Zur√ºck</button>\r\n          )\r\n      }\r\n    }\r\n\r\n    // Funktion zum Zur√ºckkehren zum vorherigen Bildschirm\r\n    function handleBack(){\r\n      props.changeUi(0,props.pData,props.gId)\r\n    }\r\n\r\n    useEffect(() => {\r\n      _init();\r\n    }, []);\r\n\r\n    // Funktion zum Abrufen der Pack-Daten von der API\r\n    function getPacks(){\r\n        axios.get(config.preUrl+'packs/').then(response => {\r\n            createPacks(response.data.packs)\r\n        })\r\n    }\r\n\r\n    // Funktion zum Hinzuf√ºgen einer Pack-ID zur Auswahl\r\n    function addId(id){\r\n        props.addId(id)\r\n      }\r\n\r\n    // Funktion zum Entfernen einer Pack-ID aus der Auswahl\r\n    function removeId(id){\r\n        props.removeId(id)\r\n      }\r\n\r\n    // Funktion zum Erstellen von Pack-Komponenten\r\n    function createPacks(pArr){\r\n        let pList = []\r\n        pList.push(pArr.map((eintrag) => (\r\n        <div>\r\n            <p> </p>\r\n            <Pack addId={addId} removeId={removeId} usePack={props.usePack} packName={eintrag.name} packId={eintrag.id} bcCount={eintrag.blackCardCount} wcCount={eintrag.whiteCardCount}/>\r\n        </div>\r\n        )))\r\n        setPacks(pList)\r\n    }\r\n    \r\n  return (\r\n    <div>\r\n        <div>{back}</div>\r\n        <div>{packs}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PacksView\r\n","D:\\Webprog\\proj-cah\\src\\Pack.js",["132"],[],"import React, { useState, useEffect } from 'react'\r\nimport Card from './Card'\r\nimport axios from 'axios'\r\nimport config from './config.json'\r\n\r\nfunction Pack(props) {\r\n    // Deklaration der ben√∂tigten Zust√§nde und Variablen\r\n    const id = props.packId\r\n    const packName = props.packName\r\n    const bcCount = props.bcCount\r\n    const wcCount = props.wcCount\r\n    const [packOpen, setPackOpen] = useState() // Zustand, um anzuzeigen, ob das Pack ge√∂ffnet ist\r\n    const [whiteCards, setWhiteCards] = useState() // Zustand zur Speicherung der wei√üen Karten im Pack\r\n    const [blackCards, setBlackCards] = useState() // Zustand zur Speicherung der schwarzen Karten im Pack\r\n    const [buttonTag, setButtonTag] = useState(\"SHOW PACK\") // Zustand f√ºr den Text auf dem Schaltfl√§chen-Tag\r\n    const [usePackBtn, setUsePackBtn] = useState() // Zustand f√ºr die Schaltfl√§che \"Choose Pack\"\r\n    const [showUsePacks, setShowUsePacks] = useState(false); // Zustand, um anzuzeigen, ob das Pack ausgew√§hlt ist\r\n\r\n    // Funktion zur Initialisierung des Komponentenstatus\r\n    function _init(){\r\n        if (props.usePack){\r\n            setUsePackBtn(\r\n                <button onClick={handleUsePack}>\r\n                {showUsePacks ? 'Pack entfernen' : 'Pack ausw√§hlen'}\r\n              </button>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        _init()\r\n    }, []);\r\n\r\n    // Funktion zum Anzeigen/Verbergen des Packs und Laden der Karten\r\n    function showPack(){\r\n        if (packOpen){\r\n            setButtonTag(\"SHOW PACK\")\r\n            setBlackCards('')\r\n            setWhiteCards('')\r\n            setPackOpen(false)\r\n        }\r\n        else{\r\n            setButtonTag(\"HIDE PACK\")\r\n            getCards()\r\n            setPackOpen(true)\r\n        }\r\n    }\r\n\r\n    // Funktion zum Abrufen der Karten im Pack von der API\r\n    function getCards() {\r\n        axios.get(config.preUrl+'packs/'+id).then(response=>{\r\n            createWhiteCards(response.data.white)\r\n            createBlackCards(response.data.black)\r\n        })\r\n    }\r\n\r\n    // Funktion zum Erstellen von Komponenten f√ºr wei√üe Karten im Pack\r\n    function createWhiteCards(cardsArr){\r\n        let cList = []\r\n        cList.push(cardsArr.map((eintrag) => (\r\n        <div>\r\n            <p> </p>\r\n            <Card key={eintrag.id} type='WhiteCard' showBtn={false} cId={eintrag.id} text={eintrag.text} />\r\n        </div>\r\n        )))\r\n        setWhiteCards(cList)\r\n    }\r\n\r\n    // Funktion zum Erstellen von Komponenten f√ºr schwarze Karten im Pack\r\n    function createBlackCards(cardsArr){\r\n        let cList = []\r\n        cList.push(cardsArr.map((eintrag) => (\r\n        <div>\r\n            <p> </p>\r\n            <Card key={eintrag.id} type='BlackCard' showBtn={false} cId={eintrag.id} text={eintrag.text} />\r\n        </div>\r\n        )))\r\n        setBlackCards(cList)\r\n    }\r\n\r\n    // Funktion zum Bearbeiten der Auswahl eines Packs\r\n    function handleUsePack(){\r\n        setShowUsePacks(!showUsePacks)\r\n        if(!showUsePacks){\r\n            props.addId(id)\r\n        }\r\n        else{\r\n            props.removeId(id)\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div id = 'card'>\r\n        {usePackBtn}\r\n        <p>Pack</p>\r\n        <p>ID:</p>\r\n        <p>{id}</p>\r\n        <p>Name:</p>\r\n        <p>{packName}</p>\r\n        <p>Black Card Count:</p>\r\n        <p>{bcCount}</p>\r\n        <p>White Card Count:</p>\r\n        <p>{wcCount}</p>\r\n        <button onClick={showPack}>{buttonTag}</button>\r\n        <div>{whiteCards}</div>\r\n        <div>{blackCards}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pack\r\n","D:\\Webprog\\proj-cah\\src\\Game.js",[],[],"D:\\Webprog\\proj-cah\\src\\CreateGame.js",[],[],"D:\\Webprog\\proj-cah\\src\\PlayAnimation.js",["133","134","135"],[],"import React, { useState, useEffect } from 'react'\r\nimport './PlayAnimation.css';\r\nimport axios from 'axios';\r\nimport config from './config.json';\r\n\r\nfunction PlayAnimation(props) {\r\n  // Deklaration der ben√∂tigten Zust√§nde und Variablen\r\n  const pData = props.playerData // Spielerdaten\r\n  const gameid = props.gId // Spiel-ID\r\n\r\n  const [text,setText] = useState('') // Zustand f√ºr den anzuzeigenden Text\r\n\r\n  // Effekt-Hook, der beim Komponentenladen aufgerufen wird\r\n  useEffect(() => {\r\n    get_winner();\r\n  }, []);\r\n\r\n  // Funktion zum Abrufen des Gewinners vom Server\r\n  function get_winner(){\r\n    axios.get(config.preUrl + 'games/').then(response => {\r\n      show_winner(response.data.games)\r\n  });\r\n  }\r\n\r\n  // Funktion zur Anzeige des Gewinners oder Verlierers\r\n  function show_winner(games){\r\n    for(let i=0;i<games.length;i++){\r\n      if (games[i].id == gameid){\r\n          if(games[i].winner.id == pData.id){\r\n            setText('GEWINNER') \r\n            back_to_main() \r\n          }\r\n          else{\r\n            setText('VERLIERER') \r\n            back_to_main() \r\n          }   \r\n      }\r\n  } \r\n\r\n  // Funktion zur Verz√∂gerung des Seitenneustarts\r\n  function timeout(delay) {\r\n    return new Promise( res => setTimeout(res, delay) );\r\n  }\r\n\r\n  // Funktion zum Zur√ºckkehren zum Hauptbildschirm nach einer Verz√∂gerung\r\n  async function back_to_main(){\r\n    await timeout(7000) // Warten f√ºr 7 Sekunden\r\n    window.location.reload(true); // Seite neu laden\r\n  }\r\n  }\r\n\r\n  // Anzeige des Gewinner- oder Verlierertexts in einer HTML-Struktur\r\n  return (\r\n    <div className=\"container\">\r\n      <label className=\"fancy-label\">{text}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlayAnimation\r\n",{"ruleId":"136","severity":1,"message":"137","line":52,"column":14,"nodeType":"138","messageId":"139","endLine":52,"endColumn":23},{"ruleId":"140","severity":1,"message":"141","line":96,"column":34,"nodeType":"142","messageId":"143","endLine":96,"endColumn":35},{"ruleId":"140","severity":1,"message":"141","line":96,"column":55,"nodeType":"142","messageId":"143","endLine":96,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":124,"column":20,"nodeType":"142","messageId":"146","endLine":124,"endColumn":22},{"ruleId":"144","severity":1,"message":"145","line":129,"column":38,"nodeType":"142","messageId":"146","endLine":129,"endColumn":40},{"ruleId":"147","severity":1,"message":"148","line":189,"column":17,"nodeType":"149","messageId":"150","endLine":189,"endColumn":32},{"ruleId":"136","severity":1,"message":"151","line":1,"column":17,"nodeType":"138","messageId":"139","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":17,"column":5,"nodeType":"154","endLine":17,"endColumn":7,"suggestions":"155"},{"ruleId":"144","severity":1,"message":"145","line":53,"column":26,"nodeType":"142","messageId":"146","endLine":53,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":63,"column":34,"nodeType":"142","messageId":"146","endLine":63,"endColumn":36},{"ruleId":"136","severity":1,"message":"156","line":7,"column":10,"nodeType":"138","messageId":"139","endLine":7,"endColumn":18},{"ruleId":"136","severity":1,"message":"157","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":13},{"ruleId":"136","severity":1,"message":"158","line":19,"column":12,"nodeType":"138","messageId":"139","endLine":19,"endColumn":25},{"ruleId":"152","severity":1,"message":"159","line":32,"column":8,"nodeType":"154","endLine":32,"endColumn":10,"suggestions":"160"},{"ruleId":"144","severity":1,"message":"145","line":58,"column":29,"nodeType":"142","messageId":"146","endLine":58,"endColumn":31},{"ruleId":"161","severity":1,"message":"162","line":91,"column":12,"nodeType":"163","messageId":"164","endLine":91,"endColumn":36},{"ruleId":"161","severity":1,"message":"162","line":167,"column":12,"nodeType":"163","messageId":"164","endLine":167,"endColumn":36},{"ruleId":"144","severity":1,"message":"145","line":226,"column":20,"nodeType":"142","messageId":"146","endLine":226,"endColumn":22},{"ruleId":"136","severity":1,"message":"165","line":7,"column":11,"nodeType":"138","messageId":"139","endLine":7,"endColumn":21},{"ruleId":"152","severity":1,"message":"153","line":14,"column":8,"nodeType":"154","endLine":14,"endColumn":10,"suggestions":"166"},{"ruleId":"144","severity":1,"message":"145","line":20,"column":32,"nodeType":"142","messageId":"146","endLine":20,"endColumn":34},{"ruleId":"136","severity":1,"message":"167","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"136","severity":1,"message":"168","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"169","line":30,"column":6,"nodeType":"154","endLine":30,"endColumn":59,"suggestions":"170"},{"ruleId":"136","severity":1,"message":"171","line":9,"column":5,"nodeType":"138","messageId":"139","endLine":9,"endColumn":20},{"ruleId":"152","severity":1,"message":"172","line":21,"column":6,"nodeType":"154","endLine":21,"endColumn":29,"suggestions":"173"},{"ruleId":"152","severity":1,"message":"174","line":28,"column":6,"nodeType":"154","endLine":28,"endColumn":40,"suggestions":"175"},{"ruleId":"152","severity":1,"message":"176","line":9,"column":7,"nodeType":"154","endLine":9,"endColumn":9,"suggestions":"177"},{"ruleId":"152","severity":1,"message":"178","line":30,"column":8,"nodeType":"154","endLine":30,"endColumn":10,"suggestions":"179"},{"ruleId":"152","severity":1,"message":"178","line":32,"column":8,"nodeType":"154","endLine":32,"endColumn":10,"suggestions":"180"},{"ruleId":"152","severity":1,"message":"181","line":16,"column":6,"nodeType":"154","endLine":16,"endColumn":8,"suggestions":"182"},{"ruleId":"144","severity":1,"message":"145","line":28,"column":23,"nodeType":"142","messageId":"146","endLine":28,"endColumn":25},{"ruleId":"144","severity":1,"message":"145","line":29,"column":33,"nodeType":"142","messageId":"146","endLine":29,"endColumn":35},"no-unused-vars","'scanGames' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","unexpected","react/jsx-pascal-case","Imported JSX component Recycle_bin must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGameData'. Either include it or remove the dependency array.","ArrayExpression",["183"],"'useTimer' is defined but never used.","'Timer' is defined but never used.","'cardToOfferID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array.",["184"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'playerData' is assigned a value but never used.",["185"],"'axios' is defined but never used.","'config' is defined but never used.","React Hook useEffect has missing dependencies: 'useCard' and 'voteCard'. Either include them or remove the dependency array.",["186"],"'expiryTimestamp' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'restart'. Either include it or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["188"],"React Hook useEffect has a missing dependency: 'getStaus'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: '_init'. Either include it or remove the dependency array.",["190"],["191"],"React Hook useEffect has a missing dependency: 'get_winner'. Either include it or remove the dependency array.",["192"],{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"193","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"206","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [getGameData]",{"range":"211","text":"212"},"Update the dependencies array to be: [refresh]",{"range":"213","text":"214"},{"range":"215","text":"212"},"Update the dependencies array to be: [props.text, props.showBtn, props.btnboo, props.type, useCard, voteCard]",{"range":"216","text":"217"},"Update the dependencies array to be: [props.expiryTimestamp, restart]",{"range":"218","text":"219"},"Update the dependencies array to be: [minutes, seconds, props.onExpire, props]",{"range":"220","text":"221"},"Update the dependencies array to be: [getStaus]",{"range":"222","text":"223"},"Update the dependencies array to be: [_init]",{"range":"224","text":"225"},{"range":"226","text":"225"},"Update the dependencies array to be: [get_winner]",{"range":"227","text":"228"},[619,621],"[getGameData]",[1022,1024],"[refresh]",[558,560],[965,1018],"[props.text, props.showBtn, props.btnboo, props.type, useCard, voteCard]",[506,529],"[props.expiryTimestamp, restart]",[695,729],"[minutes, seconds, props.onExpire, props]",[267,269],"[getStaus]",[879,881],"[_init]",[1368,1370],[516,518],"[get_winner]"]